#!/bin/sh

# Automates the generation of a new TMBF release.

function Error()
{
    echo >&2 "$@"
    exit 1
}


EPICS_VERSION=R3.14.12.3

# We have to separate the release path from the SVN_ROOT because the builder
# has a different SVN_ROOT configured!
RELEASE_PATH="diamond/release/ioc/TMBF"

SVN_TRUNK="$SVN_ROOT/diamond/trunk/ioc/TMBF"
SVN_RELEASE="$SVN_ROOT/$RELEASE_PATH"

# This is where the released software will be finally published and built.
PROD_ROOT="/dls_sw/prod/$EPICS_VERSION/ioc/TMBF"


cd "$(dirname "$0")/.."


# First check that we're publishing the version we expect.
VERSION="$(
    svn cat "$SVN_TRUNK"/install_d/CONFIG |
    sed -n '/^VERSION=/{s///;p;q;}')"
[ "$VERSION" = "${1?Specify release version}" ]  ||
    Error "Release version mismatch: $1 != $VERSION"

# Check the version doesn't already exist!
svn ls "$SVN_RELEASE/$VERSION"  >/dev/null 2>&1  &&
    Error "Release $VERSION already published to subversion"


# Make the release into subversion.
svn cp -m "TMBF: Release $VERSION" "$SVN_TRUNK" "$SVN_RELEASE/$VERSION" ||
    Error "Problem making subversion release"


# Now build the released version into the production area.  This has to be
# done by the release builder, so we prepare its instructions here.

QUEUE_DIR=/dls_sw/work/etc/build/queue
RELEASE_JOB=Release-TMBF-$VERSION.redhat6-x86_64

# Create the release job as a hidden file (so the builder doesn't start it
# prematurely) and then rename it make it happen.
cd "$QUEUE_DIR"  &&
cat <<EOF  >.$RELEASE_JOB  &&
export DLS_EPICS_RELEASE=$EPICS_VERSION
. /dls_sw/etc/profile
SVN_ROOT=http://serv0002.cs.diamond.ac.uk/repos/controls
cd "$PROD_ROOT"  &&
svn co "\$SVN_ROOT/$RELEASE_PATH/$VERSION"  &&
cd $VERSION  &&
make >build.log 2>build.log.err
EOF
mv .$RELEASE_JOB $RELEASE_JOB  &&
echo Job $RELEASE_JOB scheduled for build  ||
    Error "Problem building final release"
