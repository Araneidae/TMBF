#!/bin/sh


Error()
{
    echo >&2 "$@"
    exit 1
}

# copy_files <from> <to> <files...>
copy_files()
{
    local from="$1"
    local to="$2"
    shift 2

    mkdir -p $to  &&
    for f; do
        cp -a "$SOURCE"/"$from"/$f $to  ||
        return 1
    done
}

[ "$(uname -m)" = armv5tel ]  ||
    Error 'This script must be run on Libera TMBF'


SOURCE="$(cd "$(dirname "$0")"/..; pwd)"
BINDIR=bin/linux-arm_el


# Parse local installation options
TARGET=none
AUTOSTART=false
STARTNOW=false
while getopts 'ftash' option; do
    case "$option" in
    f)  TARGET=final ;;
    t)  TARGET=test ;;
    a)  AUTOSTART=true ;;
    s)  STARTNOW=true ;;
    h)  cat <<'EOF'
Usage: tmbf-install-ioc <options>
where <options> includes
    -f  Final install: copy files to local /opt directory
    -t  Testing install: don't copy files, use from configured location
    -a  Enable autostart via /etc/init.d/libera script.
    -s  Start IOC after installation
    -h  Show this help
EOF
        exit 0 ;;
    *)  Error 'Invalid option: try -h for help' ;;
    esac
done
shift $((OPTIND - 1))
[ $TARGET == none ]  &&
    Error 'Specify installation option.  Try -h for help.'
[ $# -ne 0 ]  &&  Error 'Invalid arguments: try -h for help'

# Temporarily remount filesystem for writing.
mount -o rw,remount /  ||
    Error 'Unable to remount rootfs for writing'
trap 'mount -o ro,remount /' EXIT


# Ensure epics driver isn't running at the moment.
[ -e /var/run/ioc.pid ]  &&  /etc/init.d/epics stop


# If final installation selected then copy over all the run-time files and
# update the configuration file to point to them.
if [ $TARGET == final ]; then
    # Hard-wired targets on local file system
    IOC_TARGET=/opt/ioc

    # Ensure the state directory exists (but don't interfere with it!)
    mkdir -p /var/opt/state /opt &&
    ln -sfn /var/opt/state /opt/state  &&

    # Copy over all the runtime files.  First make sure the target directory
    # is fresh.
    rm -rf "$IOC_TARGET"  &&
    copy_files '' $IOC_TARGET runioc dbd db scripts  &&
    copy_files $BINDIR $IOC_TARGET/$BINDIR tmbf  ||
        Error 'Error installing IOC files'
else
    rm -rf /opt/ioc
    # Compute EPICS and IOC paths relative to this directory.
    IOC_TARGET="$SOURCE"
fi


# Now install the epics_ioc file.
{
    # Add on the paths required for running the IOC
    echo "TMBF_IOC='$IOC_TARGET/runioc'"
} > /etc/tmbf_ioc
cat <<EOF >/etc/tmbf_ioc
TMBF_IOC='$IOC_TARGET/runioc'
DESIGN=/opt/lib/tmbf.bin
EOF


# Install the base files and startup scripts.
copy_files install_d /etc/init.d epics  &&
copy_files $BINDIR /opt/bin fp ddrInit  &&
copy_files base /opt/bin configure-network fpga_init  &&
copy_files base /opt/lib tmbf-ips  &&
ln -sf /opt/bin/configure-network /usr/sbin  ||
    Error 'Error installing base files'



# Configure autostart as required and go.
rm -f /etc/rc.d/S900epics
ln -sf ../init.d/epics /etc/rc.d/K200epics
$AUTOSTART  &&  ln -s ../init.d/epics /etc/rc.d/S900epics
$STARTNOW  &&  /etc/init.d/epics start
