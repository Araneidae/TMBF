#!/bin/sh


Error()
{
    echo >&2 "$@"
    exit 1
}


# Construct IOC parameter string array
#
#   IocParameter <flag> <value>
#
IOC_PARAMETERS=''
IocParameter()
{
    IOC_PARAMETERS="$IOC_PARAMETERS $1$2"
}



cd "$(dirname "$0")/.."

LOG_WF_LIMIT=20

. /etc/tmbf_ioc

: "${DESIGN_CONFIG_FILE:?}"


export HOSTNAME=$(hostname)

PIDFILE=/var/run/tmbf.pid
STATE_FILE=/opt/state/$HOSTNAME.state


while getopts 'nh' option; do
    case "$option" in
    n)  IocParameter -n ;;
    h)  cat <<'EOF'
Usage: runioc [options]
    -n          run non-interactive without an IOC shell
EOF
        exit 0 ;;
    *)  Error 'Invalid arguments: try -h for help' ;;
    esac
done
shift $((OPTIND - 1))
[ $# -ne 0 ]  &&  Error 'Invalid arguments: try -h for help'


# Don't run if the ioc.pid file is present: this is a simple technique to
# prevent us interfering with an already running instance.
if [ -e "$PIDFILE" ]; then
    echo >&2 'PID file found: check TMBF driver is not already running'
    exit 1
fi


export EPICS_CA_MAX_ARRAY_BYTES=1000000

# Discover the list of temporary filesystems we need to keep an eye on.  We
# use echo to create a space separated list.
export TEMP_FS_LIST="$(echo -n $(
    mount |
    sed -rn '/.* on ([^ ]*) type (tmpfs|ramfs) .*/{s//\1/;p;}'))"

IocParameter -p "$PIDFILE"
IocParameter -s "$STATE_FILE"
IocParameter -H "$DESIGN_CONFIG_FILE"
IocParameter -l "$LOG_WF_LIMIT"

# Now run the IOC.
echo
echo 'Starting IOC at' $(date)
echo "IOC parameters: $IOC_PARAMETERS"
trap 'rm -f "$PIDFILE"' EXIT
bin/linux-arm_el/tmbf -d "$HOSTNAME" $IOC_PARAMETERS
echo 'IOC stopped at' $(date)
echo

# Make sure the PID file isn't left behind.  This is a backup to the IOC itself
# which should also have removed it.  Not perfect, but hopefully an adequate
# workaround.
if [ -e "$PIDFILE" ]; then
    echo "IOC left PID file $PIDFILE, removing"
    rm -f "$PIDFILE"
fi
